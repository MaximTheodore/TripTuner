# Generated by Django 5.1.2 on 2024-11-03 07:27

import django.contrib.auth.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='', verbose_name='Изображение')),
                ('name', models.CharField(max_length=100, validators=[django.core.validators.RegexValidator(message='Поле должно содержать только буквы.', regex='^[а-яА-Яa-zA-Z\\s]*$')], verbose_name='Название страны')),
            ],
            options={
                'verbose_name': 'Страна',
                'verbose_name_plural': 'Страны',
            },
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='', verbose_name='Изображение')),
                ('name', models.CharField(max_length=100, validators=[django.core.validators.RegexValidator(message='Поле должно содержать только буквы.', regex='^[а-яА-Яa-zA-Z\\s]*$')], verbose_name='Название города')),
                ('country_id', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='TripTuner.country', verbose_name='Страна')),
            ],
            options={
                'verbose_name': 'Город',
                'verbose_name_plural': 'Города',
            },
        ),
        migrations.CreateModel(
            name='Flight',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('flight_number', models.CharField(max_length=50, validators=[django.core.validators.RegexValidator(message='Номер рейса должен содержать только буквы и цифры.', regex='^[A-Za-z0-9]*$')], verbose_name='Номер рейса')),
                ('amount_places', models.IntegerField(validators=[django.core.validators.MinValueValidator(1, message='Должно быть как минимум одно место.')], verbose_name='Количество мест')),
                ('VISA', models.BooleanField(verbose_name='Нужна виза?')),
                ('cost_with_bag', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0.0, message='Стоимость не может быть отрицательной.')], verbose_name='Стоимость с багажом')),
                ('cost_without_bag', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0.0, message='Стоимость не может быть отрицательной.')], verbose_name='Стоимость без багажа')),
                ('way', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0.0, message='Дистанция не может быть отрицательной.')], verbose_name='Дистанция')),
                ('days_of_rest', models.IntegerField(validators=[django.core.validators.MinValueValidator(1, message='Количество дней отдыха должно быть больше 0.')], verbose_name='Количество дней отдыха')),
                ('return_date', models.DateTimeField(verbose_name='Дата возвращения')),
                ('departure_date', models.DateTimeField(verbose_name='Дата отправления')),
                ('return_date_back', models.DateTimeField(verbose_name='Дата возвращения назад')),
                ('departure_date_back', models.DateTimeField(verbose_name='Дата отправления назад')),
                ('arrival_location_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='arrival_flights', to='TripTuner.city', verbose_name='Место прибытия')),
                ('departure_location_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='departure_flights', to='TripTuner.city', verbose_name='Место отправления')),
            ],
            options={
                'verbose_name': 'Рейс',
                'verbose_name_plural': 'Рейсы',
            },
        ),
        migrations.CreateModel(
            name='Hotel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='', verbose_name='Изображение')),
                ('name', models.CharField(max_length=255, validators=[django.core.validators.RegexValidator(message='Поле должно содержать только буквы.', regex='^[а-яА-Яa-zA-Z\\s]*$')], verbose_name='Название отеля')),
                ('address', models.CharField(max_length=255, verbose_name='Адрес')),
                ('city_id', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='TripTuner.city', verbose_name='Город')),
            ],
            options={
                'verbose_name': 'Отель',
                'verbose_name_plural': 'Отели',
            },
        ),
        migrations.CreateModel(
            name='HotelRoom',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, validators=[django.core.validators.RegexValidator(message='Поле должно содержать только буквы.', regex='^[а-яА-Яa-zA-Z\\s]*$')], verbose_name='Название комнаты')),
                ('size', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0.0, message='Размер не может быть отрицательным.'), django.core.validators.DecimalValidator(10, 2)], verbose_name='Размер')),
                ('description', models.TextField(verbose_name='Описание')),
                ('hotel_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='TripTuner.hotel', verbose_name='Отель')),
            ],
            options={
                'verbose_name': 'Комната',
                'verbose_name_plural': 'Комнаты',
            },
        ),
        migrations.CreateModel(
            name='HotelRoomImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='', verbose_name='Изображение комнаты')),
                ('hotelRoom_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='TripTuner.hotelroom', verbose_name='Комната')),
            ],
            options={
                'verbose_name': 'Изображение комнаты',
                'verbose_name_plural': 'Изображения комнаты',
            },
        ),
        migrations.CreateModel(
            name='Amenity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='', verbose_name='Изображение')),
                ('name', models.CharField(max_length=255, validators=[django.core.validators.RegexValidator(message='Поле должно содержать только буквы.', regex='^[а-яА-Яa-zA-Z\\s]*$')], verbose_name='Название удобства')),
                ('hotelRoom_id', models.ManyToManyField(to='TripTuner.hotelroomimage', verbose_name='Комната')),
            ],
            options={
                'verbose_name': 'Удобство',
                'verbose_name_plural': 'Удобства',
            },
        ),
        migrations.CreateModel(
            name='Landmark',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='', verbose_name='Изображение')),
                ('name', models.CharField(max_length=255, validators=[django.core.validators.RegexValidator(message='Поле должно содержать только буквы.', regex='^[а-яА-Яa-zA-Z\\s]*$')], verbose_name='Название достопримечательности')),
                ('description', models.TextField(verbose_name='Описание')),
                ('city_id', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='TripTuner.city', verbose_name='Город')),
            ],
            options={
                'verbose_name': 'Достопримечательность',
                'verbose_name_plural': 'Достопримечательности',
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('booking_place', models.IntegerField(validators=[django.core.validators.MinValueValidator(1, message='Должно быть забронировано хотя бы одно место.')], verbose_name='Забронированные места')),
                ('price_of_order', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0.0, message='Цена не может быть отрицательной.')], verbose_name='Цена заказа')),
                ('date_ordered', models.DateTimeField(auto_now_add=True, verbose_name='Дата заказа')),
                ('flight_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='TripTuner.flight', verbose_name='Рейс')),
            ],
            options={
                'verbose_name': 'Заказ',
                'verbose_name_plural': 'Заказы',
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_amount', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0.0, message='Сумма оплаты не может быть отрицательной.')], verbose_name='Сумма оплаты')),
                ('payment_date', models.DateTimeField(auto_now_add=True, verbose_name='Дата оплаты')),
                ('payment_status', models.CharField(max_length=50, verbose_name='Статус оплаты')),
                ('payment_method', models.CharField(max_length=50, verbose_name='Способ оплаты')),
                ('order_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='TripTuner.order', verbose_name='Заказ')),
            ],
            options={
                'verbose_name': 'Оплата',
                'verbose_name_plural': 'Оплаты',
            },
        ),
        migrations.CreateModel(
            name='Tour',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='', verbose_name='Изображение')),
                ('title', models.CharField(max_length=100, validators=[django.core.validators.RegexValidator(message='Поле должно содержать только буквы.', regex='^[а-яА-Яa-zA-Z\\s]*$')], verbose_name='Название тура')),
                ('description', models.TextField(verbose_name='Описание')),
                ('country_id', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='TripTuner.country', verbose_name='Страна')),
            ],
            options={
                'verbose_name': 'Тур',
                'verbose_name_plural': 'Туры',
            },
        ),
        migrations.AddField(
            model_name='flight',
            name='tour_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='TripTuner.tour', verbose_name='Тур'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=50, unique=True, validators=[django.core.validators.MinLengthValidator(1, message='Минимальный размер имени пользователя 5'), django.core.validators.RegexValidator(message='Имя пользователя может содержать латинские буквы, цифры, и специальные символы.', regex='^[A-Za-z0-9!@#$%^&*()_+\\-=\\[\\]{};:"\\\\|,.<>\\/?]*$')], verbose_name='Имя пользователя')),
                ('password', models.CharField(max_length=255, validators=[django.core.validators.MinLengthValidator(8), django.core.validators.RegexValidator(message='Пароль должен содержать минимум одну букву, одну цифру и один спецсимвол, и только латиница.', regex='^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$')], verbose_name='Пароль')),
                ('image', models.ImageField(blank=True, null=True, upload_to='', verbose_name='Фото профиля')),
                ('email', models.CharField(blank=True, max_length=50, null=True, unique=True, validators=[django.core.validators.EmailValidator()], verbose_name='Электронная почта')),
                ('first_name', models.CharField(max_length=50, validators=[django.core.validators.MinLengthValidator(2)], verbose_name='Имя')),
                ('last_name', models.CharField(max_length=50, validators=[django.core.validators.MinLengthValidator(2)], verbose_name='Фамилия')),
                ('patronymic', models.CharField(blank=True, max_length=50, null=True, verbose_name='Отчество (необязательно)')),
                ('phone', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator(message='Введите правильный номер телефона (например, 89997778855).', regex='^8\\d{10}$')], verbose_name='Телефон')),
                ('role_name', models.CharField(choices=[('Client', 'Клиент'), ('DB Admin', 'Администратор базы данных'), ('Travel Agent', 'Турагент'), ('Hotel Manager', 'Менеджер отелей')], default='Клиент', max_length=50, verbose_name='Название роли')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'swappable': 'TripTuner.User',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='tour',
            name='tourAgent_id',
            field=models.ManyToManyField(default=None, to=settings.AUTH_USER_MODEL, verbose_name='Турагент'),
        ),
        migrations.CreateModel(
            name='SupportTicket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('issue_description', models.TextField(max_length=255, validators=[django.core.validators.MinLengthValidator(10, 'Описание должно содержать минимум 10 символов.')], verbose_name='Описание проблемы')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('resolved_at', models.DateTimeField(verbose_name='Дата решения')),
                ('answer_status', models.CharField(max_length=50, validators=[django.core.validators.RegexValidator(message='Поле должно содержать только буквы.', regex='^[А-Яа-яA-Za-z]+$')], verbose_name='Статус ответа')),
                ('client_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='client', to=settings.AUTH_USER_MODEL, verbose_name='Клиент')),
                ('tourAgent_id', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='agent', to=settings.AUTH_USER_MODEL, verbose_name='Турагент')),
            ],
            options={
                'verbose_name': 'Поддержка',
                'verbose_name_plural': 'Поддержка',
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(validators=[django.core.validators.MinValueValidator(1, message='Оценка не может быть меньше 1.'), django.core.validators.MaxValueValidator(5, message='Оценка не может быть больше 5.')], verbose_name='Оценка')),
                ('advantages', models.TextField(verbose_name='Преимущества')),
                ('disadvantages', models.TextField(verbose_name='Недостатки')),
                ('review_date', models.DateTimeField(auto_now_add=True, verbose_name='Дата отзыва')),
                ('hotelRoom_id', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='TripTuner.hotelroom', verbose_name='Номер отеля')),
                ('client_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Клиент')),
            ],
            options={
                'verbose_name': 'Отзыв',
                'verbose_name_plural': 'Отзывы',
            },
        ),
        migrations.CreateModel(
            name='OrderHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='TripTuner.order', verbose_name='Заказ')),
                ('client_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Клиент')),
            ],
            options={
                'verbose_name': 'История заказов клиента',
                'verbose_name_plural': 'Истории заказов клиентов',
            },
        ),
        migrations.AddField(
            model_name='order',
            name='client_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Клиент'),
        ),
    ]
